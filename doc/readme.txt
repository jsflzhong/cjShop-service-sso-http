###2016-10-7
完成了后台系统中的内容管理.

前台系统的轮播图功能:
轮播图的思路:

		1、rest服务系统中发布webService服务 //下面5.就是.

		2、front前台系统中使用HttpClient,远程调用rest工程中的webService服务,获得数据
		
		3、front中,把取到的数据,传递给jsp页面.展示轮播图.
为什么不在jsp中直接远程用JSONP调用rest发布的webservice服务呢?
因为SEO!

完成了根据"内容分类id",查询tb_content表，得到此分类下的内容列表的webservice服务.
回到front工程里,用httpclient远程调用这个服务.


###2016-10-4
调整了cjShop-front和cjShop-service-rest两个工程的POM文件.删除了对POJO工程的依赖.
把POJO包直接复制进工程中,而不是通过依赖manage-pojo工程.
因为这个工程自己做在cjShop-back工程里了,总体是个WAR包,不是jar包,无法依赖.
因为后端不是高并发,不需要分布式.

cjShop-front:
由于web.xml中,写的默认访问页是index.html和index.jsp.表示访问localhost:8082时,会跳转到这几个页面之一中.
所以,写一个主页跳转用的IndexController.其访问url就是/index,返回/index.
表示凡是访问localhost:8082的请求,都会被转发到工程下的WEB-INF/jsp/index.jsp中.

完成了前台系统中的首页左侧导航栏用JSONP跨域直接调用rest服务,查询商品分类的功能.
但是,与之前一样,首页左侧的伸缩导航栏,还是出不来.它没有访问后端.
之前自己测试的,当项目部署到远程服务器上后,这个功能就正常了.






###2016-10-3
开始前台.
系统架构设计:
由于前台系统的高并发特性,所以,还是把前台的门户系统,和各个服务系统拆开.
门户系统单独用一个项目.
每个服务系统各用一个项目.
好处是可以分布式的部署到不同的tomcat上. 因为测试过,一个tomcat在处理并发时的表现:

	Transaction Response Time Under Load
	
	1可以看到在达到600用户同时在线的时候，系统响应时间为6秒钟
	
	100人-----响应时间0.8秒   完美
	
	150人-----响应时间1秒      完美
	
	200人-----响应时间1.5秒    响应时间有微小波动 比较完美
	
	250人-----响应时间1.8秒    比较完美（此时是理想情况下最大的并发用户数量）
	
	280人-----开始出现连接丢失问题，连接开始不稳定
	
	300人-----响应时间3秒      响应时间有较大波动峰值为6秒   较差
	
	350人-----响应时间3秒      开始大量出现连接丢失问题 连接很不稳定
	
	400人-----响应时间3.8秒    连接丢失数量达到3000次以上
	
	450人-----响应时间4秒      连接丢失数量达到6000次以上
	
	500人-----响应时间4秒      连接丢失数量达到11000次以上
	
	550人-----响应时间6秒      连接丢失数量达到21000次以上
	
	600人-----响应时间6秒      连接丢失数量达到25000次以上
	
	600人开始系统出现异常情况，因此停止测试。测试数据到此为止。

所以,十分有必要把电商项目的系统拆开,采用分布式,分别部署到不同的tomcat集群上去.

新建项目:cjShop-service-rest. 
	本项目只提供服务,不涉及到前端JSP.
	本项目是cjShop的前台系统中的rest服务系统.为门户系统和客户端提供了:
	1>.商品分类列表查询服务.
	2>.内容查询服务.
	3>.缓存同步服务.
	4>.商品基本信息服务.
	5>.商品详细信息服务.
	6>.商品规格参数查询.
	...

新建项目:cjShop-front.
	本工程是整个项目的前台系统,即门户系统.
	由于本工程的并发量非常大,所以设计成不访问数据库,而是通过调用各个服务工程,来访问数据库.
	
	

###2016-9-25
这是后台的最后一天.
1.编写了规格参数模板表和规格参数表的后端.
2.完成了规格参数模板表的分页查询列表功能.
3.完成了根据cid,查询该类目的规格参数模板,是否已经存在了.
4.完成了"提交规格参数模板"功能
5.完成了新建商品,同时提交规格参数的功能.

###2016-9-24
1.新增商品功能的实现.
	分别向商品表,商品类目表,商品描述表这三张表插入数据.测试新增商品功能===成功.


###2016-7-31
1.MyBatis的分页插件--"PageHelper"使用方法概述:
	(四部曲...)(四部曲...)(四部曲...)(四部曲...)(四部曲...)(四部曲...)(四部曲...)(四部曲...)(四部曲...)
	
	第零步: 添加插件的jar包.
	
	第一步: 需要在SqlMapConfig.xml(MyBatis的配置文件)，配置一个plugin拦截器插件。
	
	第二步: 在sql语句执行之前，添加一句: PageHelper.startPage(page,rows); //当前页,和页大小.
	
	第三步: 取分页结果数据: 创建一个"PageInfo"对象. 
			它需要一个参数: 即上面查询结果返回的list。
			最后从"PageInfo"对象中取得: 分页结果数据。(总记录数,页数,等等..)

2.easyUI的datagrid组件,固定两个请求参数:page当前页,rows页大小.  固定要求2个响应参数:rows数据集,total记录数(封装进pojo).
	
	Easyui中datagrid控件要求的数据格式为：
		{total:”2”,rows:[{“id”:”1”,”name”,”张三”},{“id”:”2”,”name”,”李四”}]}
		
	注意,最外层是花括号的话,代表就可以用JSON直接返回一个"pojo"! 格式就符合了!
	注意:easyUI的datagrid组件,不需要在jsp中迭代返回的数据集.它内部就做了.不需要我再手动迭代.
		 所以,你给它返回一组JSON就可以了. 要符合上述格式的.
								
3.easyUI的tree组件,固定一个请求参数:"id"（"当前节点"的"id"）(对应"parent_id"字段,叫做"父类目id".). 
	
	固定要求3个响应参数:"id","text","state"(封装进pojo). 
	
	分别为:'类目ID'(就是分类id,表`tb_item_cat`的主键而已),'类目名称',状态(没这个字段,自己根据`is_parent`字段来判断这个状态)
	
	要求响应数据必须是这样的:

		[{    
		    "id": 1,    
		    "text": "Node 1",    
			"state": "closed"
		 }
		{    
		    "id": 2,    
		    "text": "Node 2",    
			"state": "closed"
		 }
		]
	
	"如果当前节点为父节点，state应为“closed”、如果是叶子节点,state应为“open”(打开的节点)"
	注意:外层是中括号,代表pojo外面是一层List或Array.
	
4.在虚拟机的centOS上搭建了nginx + Fastdfs = 分布式图片服务器. 
	只用了一台nginx和一台Fastdfs. 一台nginx能处理5W左右的并发. Fastdfs暂时够用.
	
	Fastdfs是图片服务器,用来存储图片; nginx作为反向代理服务器,负责为Fastdfs提供HTTP服务,有了它,用户才能通过网络访问到自己上传的图片.在集群下还能做负载均衡.
	
	eclipse中,用插件包: fastdfs_client-1.25.jar 来做与图片服务器的连接.
	
	自己也写了连接上传图片的测试类,亲测可用.
	
	前端页面的上传图片功能,用了 KindEditor ,所以得通过查询 KindEditor 的文档,来确认前端需要返回的数据是什么.

		返回格式(JSON).

		//成功时
		{
		        "error" : 0, //不带引号,所以实体类中是int类型.
		        "url" : "http://www.example.com/path/to/file.ext" //这是图片上传的地址,是 Fastdfs 的storage server 返回的.
		}
		//失败时
		{
		        "error" : 1,
		        "message" : "错误信息"
		}

		面的返回结果,涉及到三个变量: error,url,message
		
		需要创建一个pojo描述返回值。
		
		成功实现了项目中上传图片到图片服务器,并回显的功能.
		
		如果使用图片上传和回显功能,需要先开启服务端的三个服务器:nginx+tracker server+storage server.

5.引入了2个工具类:  
	FastDFSClient.java 上传图片到Fastdfs用的. 
	JsonUtils.java  把各种数据与JSON之间转换用的.(为了返回数据在火狐浏览器的兼容性,这里没直接返回pojo,而是返回了string类型,用这个工具类把pojo转成string,然后直接返回)
	
	由于都是通用的,所以都放到common工程里了.

6.默认引入了kindEditor富文本编辑器.
	


###2016-7-30
这个工程是后台系统的工程.
没有用聚合工程,因为后台系统感觉并发不会太大.

服务器端口号:8080

暂定后台系统的登录url为:localhost:8080.
暂定不把系统发布到生产环境的Linux服务器上.那样会不得不改变很多已有配置,导致无法在本机tomcat继续运行.有时间看看hudson怎么样.
暂定不设置后台的登录拦截器. 等写完后,再重定登录url.
